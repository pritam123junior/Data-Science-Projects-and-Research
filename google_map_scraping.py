# -*- coding: utf-8 -*-
"""Google_map_scraping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12aFqoXu0maB-WqpPJrQxuQaI5Dwc8vCD
"""

pip install playwright

pip install nest_asyncio

!playwright install

pip install nest_asyncio

async def main():

    ########
    # input
    ########

    # Directly assign search terms and total
    search_list = ["schools in bangladesh "]  # Add your desired search terms here
    total = 500  # Set the desired total number of results

    ###########
    # scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        # wait is added for dev phase. can remove it in production
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            # scrolling
            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            # this variable is used to detect if the bot
            # scraped the same number of listings in the previous iteration
            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]  # Slice after gathering
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    # logic to break from loop to not run infinitely
                    # in case arrived at all available listings
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(
                            f"Currently Scraped: {count}",
                        )

            business_list = BusinessList()

            # scraping
            for listing in listings:
                try:
                    await listing.click()
                    await page.wait_for_timeout(5000)

                    name_attibute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attibute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attibute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    business.latitude, business.longitude = extract_coordinates_from_url(page.url)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred: {e}')

            #########
            # output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None  # New field for email
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None


@dataclass
class BusinessList:
    """holds list of Business objects,
    and save to both excel and csv
    """
    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """saves pandas dataframe to excel (xlsx) file

        Args:
            filename (str): filename
        """

        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """saves pandas dataframe to csv file

        Args:
            filename (str): filename
        """

        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """helper function to extract coordinates from url"""

    coordinates = url.split('/@')[-1].split('/')[0]
    # return latitude, longitude
    return float(coordinates.split(',')[0]), float(coordinates.split(',')[1])

async def main():

    ########
    # input
    ########

    # Directly assign search terms and total
    search_list = ["university in georgia"]  # Add your desired search terms here
    total = 500  # Set the desired total number of results

    ###########
    # scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        # wait is added for dev phase. can remove it in production
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            # scrolling
            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            # this variable is used to detect if the bot
            # scraped the same number of listings in the previous iteration
            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]  # Slice after gathering
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    # logic to break from loop to not run infinitely
                    # in case arrived at all available listings
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(
                            f"Currently Scraped: {count}",
                        )

            business_list = BusinessList()

            # scraping
            for listing in listings:
                try:
                    await listing.click()
                    await page.wait_for_timeout(5000)

                    name_attibute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    email_xpath = '//div[contains(text(), "Email")]/following-sibling::div'  # Placeholder for email
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attibute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    email_elements = await page.locator(email_xpath).all()  # Extract email
                    business.email = await email_elements[0].inner_text() if email_elements else ""

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attibute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    business.latitude, business.longitude = extract_coordinates_from_url(page.url)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred: {e}')

            #########
            # output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio
import re

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None

@dataclass
class BusinessList:
    """holds list of Business objects,
    and save to both excel and csv
    """
    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """saves pandas dataframe to excel (xlsx) file

        Args:
            filename (str): filename
        """

        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """saves pandas dataframe to csv file

        Args:
            filename (str): filename
        """

        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """helper function to extract coordinates from url"""

    coordinates = url.split('/@')[-1].split('/')[0]
    # return latitude, longitude
    return float(coordinates.split(',')[0]), float(coordinates.split(',')[1])

async def get_email_from_website(page, website_url):
    """Extracts email from a website page"""
    email = None
    try:
        await page.goto(website_url, timeout=60000)
        content = await page.content()
        # Regex to find email addresses
        emails = re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", content)
        if emails:
            email = emails[0]  # Take the first found email
    except Exception as e:
        print(f"Error visiting website {website_url}: {e}")
    return email

async def main():

    ########
    # input
    ########

    # Directly assign search terms and total
    search_list = ["dentist in washington"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        # wait is added for dev phase. can remove it in production
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            # scrolling
            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            # this variable is used to detect if the bot
            # scraped the same number of listings in the previous iteration
            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]  # Slice after gathering
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    # logic to break from loop to not run infinitely
                    # in case arrived at all available listings
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(
                            f"Currently Scraped: {count}",
                        )

            business_list = BusinessList()

            # scraping
            for listing in listings:
                try:
                    await listing.click()
                    await page.wait_for_timeout(5000)

                    name_attibute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attibute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attibute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    business.latitude, business.longitude = extract_coordinates_from_url(page.url)

                    # Visit the website to find email
                    if business.website:
                        business.email = await get_email_from_website(page, business.website)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred: {e}')

            #########
            # output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio
import re

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None  # New field for email
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None

@dataclass
class BusinessList:
    """holds list of Business objects,
    and save to both excel and csv
    """
    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """saves pandas dataframe to excel (xlsx) file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """saves pandas dataframe to csv file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """helper function to extract coordinates from url"""
    coordinates = url.split('/@')[-1].split('/')[0]
    # return latitude, longitude
    return float(coordinates.split(',')[0]), float(coordinates.split(',')[1])

async def get_email_from_website(page, website_url):
    """Extracts email from a website page"""
    email = None
    try:
        # Ensure the URL has a protocol prefix
        if not website_url.startswith("http://") and not website_url.startswith("https://"):
            website_url = "http://" + website_url

        await page.goto(website_url, timeout=60000)
        content = await page.content()
        # Regex to find email addresses
        emails = re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", content)
        if emails:
            email = emails[0]  # Take the first found email
    except Exception as e:
        print(f"Error visiting website {website_url}: {e}")
    return email

async def main():

    ########
    # input
    ########

    # Directly assign search terms and total
    search_list = ["dentist in washington"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        # wait is added for dev phase. can remove it in production
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            # scrolling
            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            # this variable is used to detect if the bot
            # scraped the same number of listings in the previous iteration
            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]  # Slice after gathering
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    # logic to break from loop to not run infinitely
                    # in case arrived at all available listings
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(
                            f"Currently Scraped: {count}",
                        )

            business_list = BusinessList()

            # scraping
            for listing in listings:
                try:
                    await listing.click()
                    await page.wait_for_timeout(5000)

                    name_attibute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attibute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    # Extract email from the website if available
                    if business.website:
                        business.email = await get_email_from_website(page, business.website)

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attibute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    business.latitude, business.longitude = extract_coordinates_from_url(page.url)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred: {e}')

            #########
            # output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio
import re

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None  # New field for email
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None

@dataclass
class BusinessList:
    """holds list of Business objects,
    and save to both excel and csv
    """
    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """saves pandas dataframe to excel (xlsx) file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """saves pandas dataframe to csv file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """helper function to extract coordinates from url"""
    try:
        coordinates = url.split('/@')[-1].split('/')[0]
        lat, lon = coordinates.split(',')[:2]
        # return latitude, longitude
        return float(lat), float(lon)
    except ValueError as e:
        print(f"Error extracting coordinates from URL {url}: {e}")
        return None, None

async def get_email_from_website(page, website_url):
    """Extracts email from a website page"""
    email = None
    try:
        # Ensure the URL has a protocol prefix
        if not website_url.startswith("http://") and not website_url.startswith("https://"):
            website_url = "http://" + website_url

        await page.goto(website_url, timeout=60000)
        content = await page.content()
        # Regex to find email addresses
        emails = re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", content)
        if emails:
            email = emails[0]  # Take the first found email
    except Exception as e:
        print(f"Error visiting website {website_url}: {e}")
    return email

async def main():

    ########
    # input
    ########

    # Directly assign search terms and total
    search_list = ["dentist in washington"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        # wait is added for dev phase. can remove it in production
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            # scrolling
            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            # this variable is used to detect if the bot
            # scraped the same number of listings in the previous iteration
            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]  # Slice after gathering
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    # logic to break from loop to not run infinitely
                    # in case arrived at all available listings
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(
                            f"Currently Scraped: {count}",
                        )

            business_list = BusinessList()

            # scraping
            for listing in listings:
                try:
                    await listing.click(timeout=60000)
                    await page.wait_for_timeout(5000)

                    name_attibute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attibute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    # Extract email from the website if available
                    if business.website:
                        business.email = await get_email_from_website(page, business.website)

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attibute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    business.latitude, business.longitude = extract_coordinates_from_url(page.url)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred: {e}')

            #########
            # output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio
import re

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None  # New field for email
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None

@dataclass
class BusinessList:
    """holds list of Business objects,
    and save to both excel and csv
    """
    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """saves pandas dataframe to excel (xlsx) file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """saves pandas dataframe to csv file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """helper function to extract coordinates from url"""
    if 'google.com/maps' in url:
        try:
            coordinates = url.split('/@')[-1].split('/')[0]
            lat, lon = coordinates.split(',')[:2]
            # return latitude, longitude
            return float(lat), float(lon)
        except ValueError as e:
            print(f"Error extracting coordinates from URL {url}: {e}")
    else:
        print(f"Skipping non-Google Maps URL: {url}")
    return None, None

async def get_email_from_website(page, website_url):
    """Extracts email from a website page"""
    email = None
    try:
        # Ensure the URL has a protocol prefix
        if not website_url.startswith("http://") and not website_url.startswith("https://"):
            website_url = "http://" + website_url

        await page.goto(website_url, timeout=60000)
        content = await page.content()
        # Regex to find email addresses
        emails = re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", content)
        if emails:
            email = emails[0]  # Take the first found email
    except Exception as e:
        print(f"Error visiting website {website_url}: {e}")
    return email

async def main():

    ########
    # input
    ########

    # Directly assign search terms and total
    search_list = ["dentist in washington"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        # wait is added for dev phase. can remove it in production
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            # scrolling
            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            # this variable is used to detect if the bot
            # scraped the same number of listings in the previous iteration
            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]  # Slice after gathering
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    # logic to break from loop to not run infinitely
                    # in case arrived at all available listings
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(
                            f"Currently Scraped: {count}",
                        )

            business_list = BusinessList()

            # scraping
            for i, listing in enumerate(listings):
                try:
                    print(f"Clicking on listing {i + 1}")
                    await listing.click(timeout=60000)
                    await page.wait_for_timeout(5000)

                    name_attibute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attibute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    # Extract email from the website if available
                    if business.website:
                        business.email = await get_email_from_website(page, business.website)

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attibute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    business.latitude, business.longitude = extract_coordinates_from_url(page.url)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred while processing listing {i + 1}: {e}')

            #########
            # output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio
import re

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """Holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None  # New field for email
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None

@dataclass
class BusinessList:
    """Holds list of Business objects and saves to both excel and csv"""

    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """Transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """Saves pandas dataframe to excel (xlsx) file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """Saves pandas dataframe to csv file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """Helper function to extract coordinates from URL"""
    if 'google.com/maps' in url:
        try:
            coordinates = url.split('/@')[-1].split('/')[0]
            lat, lon = coordinates.split(',')[:2]
            return float(lat), float(lon)
        except ValueError as e:
            print(f"Error extracting coordinates from URL {url}: {e}")
    else:
        print(f"Skipping non-Google Maps URL: {url}")
    return None, None

async def get_email_from_website(page, website_url):
    """Extracts email from a website page"""
    email = None
    try:
        if not website_url.startswith("http://") and not website_url.startswith("https://"):
            website_url = "http://" + website_url

        await page.goto(website_url, timeout=60000)
        content = await page.content()
        emails = re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", content)
        if emails:
            email = emails[0]
    except Exception as e:
        print(f"Error visiting website {website_url}: {e}")
    return email

async def main():
    ########
    # input
    ########
    search_list = ["dentist in washington"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)  # Set headless=False for debugging
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(f"Currently Scraped: {count}")

            business_list = BusinessList()

            for i, listing in enumerate(listings):
                try:
                    print(f"Clicking on listing {i + 1}")
                    await listing.click(timeout=120000)  # Increase timeout
                    await page.wait_for_timeout(5000)

                    name_attibute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attibute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    if business.website:
                        business.email = await get_email_from_website(page, business.website)

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attibute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    business.latitude, business.longitude = extract_coordinates_from_url(page.url)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred while processing listing {i + 1}: {e}')

            #########
            # output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

async def main():
    ########
    # input
    ########
    search_list = ["University in Dhaka"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)  # Set headless=True
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(f"Currently Scraped: {count}")

            business_list = BusinessList()

            for i, listing in enumerate(listings):
                try:
                    print(f"Clicking on listing {i + 1}")
                    await listing.click(timeout=120000)  # Increase timeout
                    await page.wait_for_timeout(5000)

                    name_attibute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attibute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    if business.website:
                        business.email = await get_email_from_website(page, business.website)

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attibute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    business.latitude, business.longitude = extract_coordinates_from_url(page.url)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred while processing listing {i + 1}: {e}')

            #########
            # output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None  # New field for email
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None


@dataclass
class BusinessList:
    """holds list of Business objects,
    and save to both excel and csv
    """
    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """saves pandas dataframe to excel (xlsx) file

        Args:
            filename (str): filename
        """

        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """saves pandas dataframe to csv file

        Args:
            filename (str): filename
        """

        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """helper function to extract coordinates from url"""

    coordinates = url.split('/@')[-1].split('/')[0]
    # return latitude, longitude
    return float(coordinates.split(',')[0]), float(coordinates.split(',')[1])

async def get_email_from_website(page, url):
    """Visit the website and try to extract the email address."""
    try:
        # Ensure the URL has a valid scheme
        if not url.startswith('http://') and not url.startswith('https://'):
            url = 'http://' + url

        await page.goto(url, timeout=120000)
        # Extract the email address from the website using a regex
        content = await page.content()
        import re
        email = re.search(r'[\w\.-]+@[\w\.-]+', content)
        if email:
            return email.group(0)
    except Exception as e:
        print(f"Error visiting website {url}: {e}")
    return None

async def main():
    ########
    # input
    ########
    search_list = ["Private University in Dhaka"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)  # Set headless=True
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(f"Currently Scraped: {count}")

            business_list = BusinessList()

            for i, listing in enumerate(listings):
                try:
                    print(f"Clicking on listing {i + 1}")
                    await listing.click(timeout=120000)  # Increase timeout
                    await page.wait_for_timeout(5000)

                    name_attibute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attibute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    if business.website and not business.website.startswith('https://www.google.com'):
                        business.email = await get_email_from_website(page, business.website)

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attibute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    business.latitude, business.longitude = extract_coordinates_from_url(page.url)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred while processing listing {i + 1}: {e}')

            #########
            # output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """Holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None  # New field for email
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None

@dataclass
class BusinessList:
    """Holds list of Business objects and saves to both Excel and CSV"""
    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """Transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """Saves pandas dataframe to Excel (xlsx) file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """Saves pandas dataframe to CSV file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """Helper function to extract coordinates from a URL."""
    try:
        coordinates = url.split('/@')[-1].split('/')[0]
        latitude, longitude = coordinates.split(',')[:2]  # Extract only the first two parts
        return float(latitude), float(longitude)
    except (ValueError, IndexError):
        print(f"Error extracting coordinates from URL {url}: invalid format")
        return None, None  # Return None if coordinates can't be extracted

async def main():

    ########
    # Input
    ########

    # Directly assign search terms and total
    search_list = ["private university in Dhaka"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # Scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        # wait is added for dev phase. can remove it in production
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            # Scrolling
            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            # This variable is used to detect if the bot
            # scraped the same number of listings in the previous iteration
            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]  # Slice after gathering
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    # Logic to break from loop to not run infinitely
                    # in case arrived at all available listings
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(
                            f"Currently Scraped: {count}",
                        )

            business_list = BusinessList()

            # Scraping
            for idx, listing in enumerate(listings):
                try:
                    print(f"Clicking on listing {idx + 1}")
                    await listing.click()
                    await page.wait_for_timeout(5000)

                    name_attribute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    email_xpath = '//div[contains(text(), "Email")]/following-sibling::div'  # Placeholder for email
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute = await listing.get_attribute(name_attribute)
                    business.name = name_attribute if name_attribute else ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    email_elements = await page.locator(email_xpath).all()  # Extract email
                    business.email = await email_elements[0].inner_text() if email_elements else ""

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        business.reviews_average = float(
                            (await reviews_average_elements[0].get_attribute(name_attribute))
                            .split()[0]
                            .replace(',', '.')
                            .strip()
                        )
                    else:
                        business.reviews_average = ""

                    # Use default coordinates if not available
                    business.latitude, business.longitude = extract_coordinates_from_url(page.url) or (None, None)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred while processing listing {idx + 1}: {e}')

            #########
            # Output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """Holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None  # New field for email
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None

@dataclass
class BusinessList:
    """Holds list of Business objects and saves to both Excel and CSV"""
    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """Transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """Saves pandas dataframe to Excel (xlsx) file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """Saves pandas dataframe to CSV file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """Helper function to extract coordinates from a URL."""
    try:
        if '/@' in url:
            coordinates = url.split('/@')[-1].split('/')[0]
            latitude, longitude = coordinates.split(',')[:2]  # Extract only the first two parts
            return float(latitude), float(longitude)
        return None, None  # Return None if the URL format is not as expected
    except (ValueError, IndexError) as e:
        print(f"Error extracting coordinates from URL {url}: {e}")
        return None, None

async def main():

    ########
    # Input
    ########

    # Directly assign search terms and total
    search_list = ["private university in Dhaka"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # Scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        # Wait is added for dev phase. Can remove it in production
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            # Scrolling
            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            # This variable is used to detect if the bot
            # scraped the same number of listings in the previous iteration
            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]  # Slice after gathering
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    # Logic to break from loop to not run infinitely
                    # in case arrived at all available listings
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(
                            f"Currently Scraped: {count}",
                        )

            business_list = BusinessList()

            # Scraping
            for idx, listing in enumerate(listings):
                try:
                    print(f"Clicking on listing {idx + 1}")
                    await listing.click()
                    await page.wait_for_timeout(5000)

                    name_attribute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    email_xpath = '//div[contains(text(), "Email")]/following-sibling::div'  # Placeholder for email
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute_value = await listing.get_attribute(name_attribute)
                    if name_attribute_value:
                        business.name = name_attribute_value
                    else:
                        business.name = ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    business.website = await website_elements[0].inner_text() if website_elements else ""

                    email_elements = await page.locator(email_xpath).all()  # Extract email
                    business.email = await email_elements[0].inner_text() if email_elements else ""

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        average_value = await reviews_average_elements[0].get_attribute(name_attribute)
                        if average_value:
                            business.reviews_average = float(
                                average_value.split()[0]
                                .replace(',', '.')
                                .strip()
                            )
                        else:
                            business.reviews_average = ""
                    else:
                        business.reviews_average = ""

                    # Use default coordinates if not available
                    business.latitude, business.longitude = extract_coordinates_from_url(page.url) or (None, None)

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred while processing listing {idx + 1}: {e}')

            #########
            # Output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()

from playwright.async_api import async_playwright
from dataclasses import dataclass, asdict, field
import pandas as pd
import os
import nest_asyncio
import asyncio
import re

# Apply the nest_asyncio patch
nest_asyncio.apply()

@dataclass
class Business:
    """Holds business data"""

    name: str = None
    address: str = None
    website: str = None
    email: str = None
    phone_number: str = None
    reviews_count: int = None
    reviews_average: float = None
    latitude: float = None
    longitude: float = None

@dataclass
class BusinessList:
    """Holds list of Business objects and saves to both Excel and CSV"""
    business_list: list[Business] = field(default_factory=list)
    save_at = 'output'

    def dataframe(self):
        """Transform business_list to pandas dataframe

        Returns: pandas dataframe
        """
        return pd.json_normalize(
            (asdict(business) for business in self.business_list), sep="_"
        )

    def save_to_excel(self, filename):
        """Saves pandas dataframe to Excel (xlsx) file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_excel(f"{self.save_at}/{filename}.xlsx", index=False)

    def save_to_csv(self, filename):
        """Saves pandas dataframe to CSV file

        Args:
            filename (str): filename
        """
        if not os.path.exists(self.save_at):
            os.makedirs(self.save_at)
        self.dataframe().to_csv(f"{self.save_at}/{filename}.csv", index=False)

def extract_coordinates_from_url(url: str) -> tuple[float, float]:
    """Helper function to extract coordinates from a URL."""
    try:
        if '/@' in url:
            coordinates = url.split('/@')[-1].split('/')[0]
            latitude, longitude = coordinates.split(',')[:2]  # Extract only the first two parts
            return float(latitude), float(longitude)
        return None, None  # Return None if the URL format is not as expected
    except (ValueError, IndexError) as e:
        print(f"Error extracting coordinates from URL {url}: {e}")
        return None, None

async def extract_email_from_website(context, url: str) -> str:
    """Extract email address from the given website URL."""
    try:
        # Ensure URL has a proper scheme
        if not (url.startswith("http://") or url.startswith("https://")):
            url = f"http://{url}"

        page = await context.new_page()
        await page.goto(url, timeout=60000)
        await page.wait_for_load_state("domcontentloaded")  # Wait for page to load completely

        # Extract email using regex
        content = await page.content()
        email_matches = re.findall(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', content)

        # Return first email found or None if not found
        return email_matches[0] if email_matches else None

    except Exception as e:
        print(f"Error extracting email from {url}: {e}")
        return None

async def main():

    ########
    # Input
    ########

    # Directly assign search terms and total
    search_list = ["private university in Dhaka"]  # Add your desired search terms here
    total = 5  # Set the desired total number of results

    ###########
    # Scraping
    ###########
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        # Set user-agent to mimic a real browser
        context = await browser.new_context(user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
        page = await context.new_page()

        await page.goto("https://www.google.com/maps", timeout=60000)
        # Wait is added for dev phase. Can remove it in production
        await page.wait_for_timeout(5000)

        for search_for_index, search_for in enumerate(search_list):
            print(f"-----\n{search_for_index} - {search_for}".strip())

            await page.locator('//input[@id="searchboxinput"]').fill(search_for)
            await page.wait_for_timeout(3000)

            await page.keyboard.press("Enter")
            await page.wait_for_timeout(5000)

            # Scrolling
            await page.hover('//a[contains(@href, "https://www.google.com/maps/place")]')

            # This variable is used to detect if the bot
            # scraped the same number of listings in the previous iteration
            previously_counted = 0
            while True:
                await page.mouse.wheel(0, 10000)
                await page.wait_for_timeout(3000)

                count = await page.locator(
                    '//a[contains(@href, "https://www.google.com/maps/place")]'
                ).count()

                if count >= total:
                    listings = await page.locator(
                        '//a[contains(@href, "https://www.google.com/maps/place")]'
                    ).all()
                    if len(listings) > total:
                        listings = listings[:total]  # Slice after gathering
                    print(f"Total Scraped: {len(listings)}")
                    break
                else:
                    # Logic to break from loop to not run infinitely
                    # in case arrived at all available listings
                    if count == previously_counted:
                        listings = await page.locator(
                            '//a[contains(@href, "https://www.google.com/maps/place")]'
                        ).all()
                        print(f"Arrived at all available\nTotal Scraped: {len(listings)}")
                        break
                    else:
                        previously_counted = count
                        print(
                            f"Currently Scraped: {count}",
                        )

            business_list = BusinessList()

            # Scraping
            for idx, listing in enumerate(listings):
                try:
                    print(f"Clicking on listing {idx + 1}")
                    # Ensure the element is interactable
                    await page.wait_for_selector(
                        f'//a[contains(@href, "https://www.google.com/maps/place")][{idx + 1}]',
                        state='visible',
                        timeout=600000  # Increased timeout
                    )
                    await listing.click(timeout=600000)
                    await page.wait_for_timeout(5000)

                    name_attribute = 'aria-label'
                    address_xpath = '//button[@data-item-id="address"]//div[contains(@class, "fontBodyMedium")]'
                    website_xpath = '//a[@data-item-id="authority"]//div[contains(@class, "fontBodyMedium")]'
                    phone_number_xpath = '//button[contains(@data-item-id, "phone:tel:")]//div[contains(@class, "fontBodyMedium")]'
                    review_count_xpath = '//button[@jsaction="pane.reviewChart.moreReviews"]//span'
                    reviews_average_xpath = '//div[@jsaction="pane.reviewChart.moreReviews"]//div[@role="img"]'

                    business = Business()

                    name_attribute_value = await listing.get_attribute(name_attribute)
                    if name_attribute_value:
                        business.name = name_attribute_value
                    else:
                        business.name = ""

                    address_elements = await page.locator(address_xpath).all()
                    business.address = await address_elements[0].inner_text() if address_elements else ""

                    website_elements = await page.locator(website_xpath).all()
                    website = await website_elements[0].inner_text() if website_elements else ""
                    business.website = website

                    phone_number_elements = await page.locator(phone_number_xpath).all()
                    business.phone_number = await phone_number_elements[0].inner_text() if phone_number_elements else ""

                    review_count_elements = await page.locator(review_count_xpath).all()
                    if review_count_elements:
                        business.reviews_count = int(
                            (await review_count_elements[0].inner_text())
                            .split()[0]
                            .replace(',', '')
                            .strip()
                        )
                    else:
                        business.reviews_count = ""

                    reviews_average_elements = await page.locator(reviews_average_xpath).all()
                    if reviews_average_elements:
                        average_value = await reviews_average_elements[0].get_attribute(name_attribute)
                        if average_value:
                            business.reviews_average = float(
                                average_value.split()[0]
                                .replace(',', '.')
                                .strip()
                            )
                        else:
                            business.reviews_average = ""
                    else:
                        business.reviews_average = ""

                    # Use default coordinates if not available
                    business.latitude, business.longitude = extract_coordinates_from_url(page.url) or (None, None)

                    # Extract email address from the business website
                    if website:
                        email = await extract_email_from_website(context, website)
                        business.email = email

                    business_list.business_list.append(business)
                except Exception as e:
                    print(f'Error occurred while processing listing {idx + 1}: {e}')

            #########
            # Output
            #########
            business_list.save_to_excel(f"google_maps_data_{search_for}".replace(' ', '_'))
            business_list.save_to_csv(f"google_maps_data_{search_for}".replace(' ', '_'))

        await browser.close()

# Run the main function in the asyncio event loop
await main()